//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Init()
    * f1 -> ( Instruction() )*
    * f2 -> [ Assertion() ]
    * f3 -> Measure()
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "circuit"
    * f1 -> ":"
    * f2 -> IntegerLiteral()
    * f3 -> "qubits"
    */
   public R visit(Init n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> OneQubitInstruction()
    *       | TwoQubitInstruction()
    *       | ThreeQubitInstruction()
    */
   public R visit(Instruction n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> OneQubitGate()
    * f1 -> "("
    * f2 -> IntegerLiteral()
    * f3 -> ")"
    */
   public R visit(OneQubitInstruction n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> TwoQubitGate()
    * f1 -> "("
    * f2 -> IntegerLiteral()
    * f3 -> ","
    * f4 -> IntegerLiteral()
    * f5 -> ")"
    */
   public R visit(TwoQubitInstruction n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> ThreeQubitGate()
    * f1 -> "("
    * f2 -> IntegerLiteral()
    * f3 -> ","
    * f4 -> IntegerLiteral()
    * f5 -> ","
    * f6 -> IntegerLiteral()
    * f7 -> ")"
    */
   public R visit(ThreeQubitInstruction n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> "H"
    *       | "T"
    *       | "X"
    *       | "Z"
    *       | "D"
    *       | "S"
    */
   public R visit(OneQubitGate n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CNOT"
    *       | "CZ"
    */
   public R visit(TwoQubitGate n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CCNOT"
    *       | "NCCNOT"
    *       | "CNCNOT"
    *       | "NCNCNOT"
    */
   public R visit(ThreeQubitGate n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "assert"
    * f1 -> "state"
    * f2 -> "in"
    * f3 -> "span"
    * f4 -> "{"
    * f5 -> AVector()
    * f6 -> ","
    * f7 -> AVector()
    * f8 -> "}"
    */
   public R visit(Assertion n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> Component()
    * f1 -> ( Component() )*
    */
   public R visit(AVector n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> BracketedComponent()
    *       | Ket()
    */
   public R visit(Component n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> [ Amplitude() ]
    * f2 -> Ket()
    * f3 -> "+"
    * f4 -> [ Amplitude() ]
    * f5 -> Ket()
    * f6 -> ")"
    */
   public R visit(BracketedComponent n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Real()
    *       | Complex()
    */
   public R visit(Amplitude n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "|"
    * f1 -> ( KetContent() )+
    * f2 -> ">"
    */
   public R visit(Ket n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | "+"
    *       | "-"
    */
   public R visit(KetContent n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Real()
    * f2 -> "+"
    * f3 -> Real()
    * f4 -> "i"
    * f5 -> ")"
    */
   public R visit(Complex n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> [ Sign() ]
    * f1 -> IntegerLiteral()
    * f2 -> "."
    * f3 -> IntegerLiteral()
    */
   public R visit(Real n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "-"
    */
   public R visit(Sign n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "measure"
    * f1 -> IntegerLiteral()
    * f2 -> ".."
    * f3 -> IntegerLiteral()
    */
   public R visit(Measure n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
