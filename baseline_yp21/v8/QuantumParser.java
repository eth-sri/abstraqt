/* Generated By:JavaCC: Do not edit this line. QuantumParser.java */
import syntaxtree.*;
import java.util.Vector;


public class QuantumParser implements QuantumParserConstants {

  static final public Goal Goal() throws ParseException {
   Init n0;
   NodeListOptional n1 = new NodeListOptional();
   Instruction n2;
   NodeOptional n3 = new NodeOptional();
   Assertion n4;
   Measure n5;
   NodeToken n6;
   Token n7;
    n0 = Init();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case H:
      case X:
      case T:
      case Z:
      case D:
      case S:
      case CNOT:
      case CCNOT:
      case NCCNOT:
      case CNCNOT:
      case NCNCNOT:
      case CZ:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n2 = Instruction();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case myassert:
      n4 = Assertion();
        n3.addNode(n4);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n5 = Measure();
    n7 = jj_consume_token(0);
      n7.beginColumn++; n7.endColumn++;
      n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Goal(n0,n1,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Init Init() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(circuit);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(72);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = IntegerLiteral();
    n6 = jj_consume_token(qubits);
                 n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Init(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Instruction Instruction() throws ParseException {
   NodeChoice n0;
   OneQubitInstruction n1;
   TwoQubitInstruction n2;
   ThreeQubitInstruction n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case H:
    case X:
    case T:
    case Z:
    case D:
    case S:
      n1 = OneQubitInstruction();
        n0 = new NodeChoice(n1, 0);
      break;
    case CNOT:
    case CZ:
      n2 = TwoQubitInstruction();
        n0 = new NodeChoice(n2, 1);
      break;
    case CCNOT:
    case NCCNOT:
    case CNCNOT:
    case NCNCNOT:
      n3 = ThreeQubitInstruction();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Instruction(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OneQubitInstruction OneQubitInstruction() throws ParseException {
   OneQubitGate n0;
   NodeToken n1;
   Token n2;
   IntegerLiteral n3;
   NodeToken n4;
   Token n5;
    n0 = OneQubitGate();
    n2 = jj_consume_token(LPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = IntegerLiteral();
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new OneQubitInstruction(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public TwoQubitInstruction TwoQubitInstruction() throws ParseException {
   TwoQubitGate n0;
   NodeToken n1;
   Token n2;
   IntegerLiteral n3;
   NodeToken n4;
   Token n5;
   IntegerLiteral n6;
   NodeToken n7;
   Token n8;
    n0 = TwoQubitGate();
    n2 = jj_consume_token(LPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = IntegerLiteral();
    n5 = jj_consume_token(73);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = IntegerLiteral();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new TwoQubitInstruction(n0,n1,n3,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ThreeQubitInstruction ThreeQubitInstruction() throws ParseException {
   ThreeQubitGate n0;
   NodeToken n1;
   Token n2;
   IntegerLiteral n3;
   NodeToken n4;
   Token n5;
   IntegerLiteral n6;
   NodeToken n7;
   Token n8;
   IntegerLiteral n9;
   NodeToken n10;
   Token n11;
    n0 = ThreeQubitGate();
    n2 = jj_consume_token(LPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = IntegerLiteral();
    n5 = jj_consume_token(73);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = IntegerLiteral();
    n8 = jj_consume_token(73);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = IntegerLiteral();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new ThreeQubitInstruction(n0,n1,n3,n4,n6,n7,n9,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public OneQubitGate OneQubitGate() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case H:
      n2 = jj_consume_token(H);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case T:
      n4 = jj_consume_token(T);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case X:
      n6 = jj_consume_token(X);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case Z:
      n8 = jj_consume_token(Z);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case D:
      n10 = jj_consume_token(D);
                n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case S:
      n12 = jj_consume_token(S);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OneQubitGate(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TwoQubitGate TwoQubitGate() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CNOT:
      n2 = jj_consume_token(CNOT);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CZ:
      n4 = jj_consume_token(CZ);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TwoQubitGate(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ThreeQubitGate ThreeQubitGate() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CCNOT:
      n2 = jj_consume_token(CCNOT);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case NCCNOT:
      n4 = jj_consume_token(NCCNOT);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case CNCNOT:
      n6 = jj_consume_token(CNCNOT);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case NCNCNOT:
      n8 = jj_consume_token(NCNCNOT);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ThreeQubitGate(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Assertion Assertion() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   AVector n10;
   NodeToken n11;
   Token n12;
   AVector n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(myassert);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(state);
                n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(in);
             n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(span);
               n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(LBRACE);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = AVector();
    n12 = jj_consume_token(73);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = AVector();
    n15 = jj_consume_token(RBRACE);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new Assertion(n0,n2,n4,n6,n8,n10,n11,n13,n14);}
    throw new Error("Missing return statement in function");
  }

  static final public AVector AVector() throws ParseException {
   Component n0;
   NodeListOptional n1 = new NodeListOptional();
   Component n2;
    n0 = Component();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case choice:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      n2 = Component();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AVector(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Component Component() throws ParseException {
   NodeChoice n0;
   BracketedComponent n1;
   Ket n2;
    if (jj_2_1(2)) {
      n1 = BracketedComponent();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case choice:
        n2 = Ket();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Component(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BracketedComponent BracketedComponent() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Amplitude n3;
   Ket n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   Amplitude n8;
   Ket n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MINUS:
    case INTEGER_LITERAL:
      n3 = Amplitude();
        n2.addNode(n3);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    n4 = Ket();
    n6 = jj_consume_token(PLUS);
            n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MINUS:
    case INTEGER_LITERAL:
      n8 = Amplitude();
        n7.addNode(n8);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    n9 = Ket();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new BracketedComponent(n0,n2,n4,n5,n7,n9,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public Amplitude Amplitude() throws ParseException {
   NodeChoice n0;
   Real n1;
   Complex n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case INTEGER_LITERAL:
      n1 = Real();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
      n2 = Complex();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Amplitude(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Ket Ket() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   KetContent n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(choice);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_3:
    while (true) {
      n3 = KetContent();
        n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case INTEGER_LITERAL:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(greaterthan);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Ket(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public KetContent KetContent() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case PLUS:
      n3 = jj_consume_token(PLUS);
               n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
      break;
    case MINUS:
      n5 = jj_consume_token(MINUS);
               n4 = JTBToolkit.makeNodeToken(n5);
        n0 = new NodeChoice(n4, 2);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new KetContent(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Complex Complex() throws ParseException {
   NodeToken n0;
   Token n1;
   Real n2;
   NodeToken n3;
   Token n4;
   Real n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Real();
    n4 = jj_consume_token(PLUS);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Real();
    n7 = jj_consume_token(sqrtminusone);
            n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Complex(n0,n2,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Real Real() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Sign n1;
   IntegerLiteral n2;
   NodeToken n3;
   Token n4;
   IntegerLiteral n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      n1 = Sign();
        n0.addNode(n1);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    n2 = IntegerLiteral();
    n4 = jj_consume_token(DOT);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = IntegerLiteral();
     {if (true) return new Real(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Sign Sign() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(MINUS);
            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Sign(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Measure Measure() throws ParseException {
   NodeToken n0;
   Token n1;
   IntegerLiteral n2;
   NodeToken n3;
   Token n4;
   IntegerLiteral n5;
    n1 = jj_consume_token(measure);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = IntegerLiteral();
    n4 = jj_consume_token(74);
             n3 = JTBToolkit.makeNodeToken(n4);
    n5 = IntegerLiteral();
     {if (true) return new Measure(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(choice)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public QuantumParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x100200,0x100200,0x100200,0x180000,0x180000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7ff800,0x10000000,0x7ff800,0x1f800,0x420000,0x3c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x10,0x10,0x10,0x10,0x10,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QuantumParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QuantumParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QuantumParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QuantumParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new QuantumParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QuantumParser(QuantumParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QuantumParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
