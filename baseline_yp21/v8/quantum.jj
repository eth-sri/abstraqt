options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(QuantumParser)
  public class QuantumParser {}
PARSER_END(QuantumParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&&" >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >         
| < H: "H" >
| < X: "X" >
| < T: "T" >
| < Z: "Z" >
| < D: "D" >
| < S: "S" >
| < CNOT: "CNOT" >
| < CCNOT: "CCNOT" >
| < NCCNOT: "NCCNOT" >
| < CNCNOT: "CNCNOT" >
| < NCNCNOT: "NCNCNOT" >
| < CZ: "CZ" >
| < q: "q" >
| < qreg: "qreg" >
| < measure: "measure" >
| < circuit: "circuit" >
| < qubits: "qubits" >
| < myassert: "assert" >
| < span: "span" >
| < state: "state" >
| < in: "in" >
| < otimes: "(x)" >
| < choice: "|" >
| < greaterthan: ">" >
| < sqrtminusone: "i" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: (["0"-"9"])+ >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The Quantum Grammar Starts Here *
 ************************************/


void Goal() :
{}
{
  Init()
  ( Instruction() )*
  [ Assertion() ]
  Measure()
  <EOF>
}

void Init() :
{}
{
  "circuit" ":" IntegerLiteral() "qubits"
}

void Instruction() :  
{}
{ 
  OneQubitInstruction()
|
  TwoQubitInstruction()
|
  ThreeQubitInstruction()
}

void OneQubitInstruction() :
{}
{
  OneQubitGate() "(" IntegerLiteral() ")"
}

void TwoQubitInstruction() :
{}
{
  TwoQubitGate() "(" IntegerLiteral() "," IntegerLiteral() ")"
}

void ThreeQubitInstruction() :
{}
{
  ThreeQubitGate() "(" IntegerLiteral() "," IntegerLiteral() "," 
                       IntegerLiteral() ")"
}

void OneQubitGate() :
{}
{
  "H" | "T" | "X" | "Z" | "D" | "S"
}

void TwoQubitGate() :
{}
{
  "CNOT" | "CZ"
}

void ThreeQubitGate() :
{}
{
  "CCNOT" | "NCCNOT" | "CNCNOT" | "NCNCNOT" 
}

void Assertion() :
{}
{
  "assert" "state" "in" "span" "{" AVector() "," AVector() "}"
}

void AVector() :
{}
{
  Component() ( Component() )*
}

void Component() :
{}
{
  LOOKAHEAD(2)
  BracketedComponent()
|
  Ket()
}

void BracketedComponent() :
{}
{
  "(" [ Amplitude() ] Ket() "+" [ Amplitude() ] Ket() ")"
}

void Amplitude() :
{}
{
  Real() 
| Complex()
}

void Ket() :
{}
{
  "|" ( KetContent() )+ ">"
}

void KetContent() :
{}
{
  IntegerLiteral() 
| "+" 
| "-"
}

void Complex() :
{}
{
  "(" Real() "+" Real() "i" ")"
}

void Real() :
{}
{
  [ Sign() ] IntegerLiteral() "." IntegerLiteral() 
}

void Sign() :
{}
{
  "-"
}

void Measure() :
{}
{
  "measure" IntegerLiteral() ".." IntegerLiteral()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

