/* Generated By:JavaCC: Do not edit this line. QuantumParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QuantumParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int LPAREN = 9;
  /** RegularExpression Id. */
  int RPAREN = 10;
  /** RegularExpression Id. */
  int LSQPAREN = 11;
  /** RegularExpression Id. */
  int RSQPAREN = 12;
  /** RegularExpression Id. */
  int LBRACE = 13;
  /** RegularExpression Id. */
  int RBRACE = 14;
  /** RegularExpression Id. */
  int SEMICOLON = 15;
  /** RegularExpression Id. */
  int DOT = 16;
  /** RegularExpression Id. */
  int ASSIGN = 17;
  /** RegularExpression Id. */
  int LT = 18;
  /** RegularExpression Id. */
  int PLUS = 19;
  /** RegularExpression Id. */
  int MINUS = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int BOOLEAN = 23;
  /** RegularExpression Id. */
  int CLASS = 24;
  /** RegularExpression Id. */
  int INTERFACE = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int FALSE = 28;
  /** RegularExpression Id. */
  int IF = 29;
  /** RegularExpression Id. */
  int WHILE = 30;
  /** RegularExpression Id. */
  int INTEGER = 31;
  /** RegularExpression Id. */
  int LENGTH = 32;
  /** RegularExpression Id. */
  int MAIN = 33;
  /** RegularExpression Id. */
  int NEW = 34;
  /** RegularExpression Id. */
  int PUBLIC = 35;
  /** RegularExpression Id. */
  int RETURN = 36;
  /** RegularExpression Id. */
  int STATIC = 37;
  /** RegularExpression Id. */
  int STRING = 38;
  /** RegularExpression Id. */
  int THIS = 39;
  /** RegularExpression Id. */
  int TRUE = 40;
  /** RegularExpression Id. */
  int PRINT = 41;
  /** RegularExpression Id. */
  int VOID = 42;
  /** RegularExpression Id. */
  int H = 43;
  /** RegularExpression Id. */
  int X = 44;
  /** RegularExpression Id. */
  int T = 45;
  /** RegularExpression Id. */
  int Z = 46;
  /** RegularExpression Id. */
  int D = 47;
  /** RegularExpression Id. */
  int S = 48;
  /** RegularExpression Id. */
  int CNOT = 49;
  /** RegularExpression Id. */
  int CCNOT = 50;
  /** RegularExpression Id. */
  int NCCNOT = 51;
  /** RegularExpression Id. */
  int CNCNOT = 52;
  /** RegularExpression Id. */
  int NCNCNOT = 53;
  /** RegularExpression Id. */
  int CZ = 54;
  /** RegularExpression Id. */
  int q = 55;
  /** RegularExpression Id. */
  int qreg = 56;
  /** RegularExpression Id. */
  int measure = 57;
  /** RegularExpression Id. */
  int circuit = 58;
  /** RegularExpression Id. */
  int qubits = 59;
  /** RegularExpression Id. */
  int myassert = 60;
  /** RegularExpression Id. */
  int span = 61;
  /** RegularExpression Id. */
  int state = 62;
  /** RegularExpression Id. */
  int in = 63;
  /** RegularExpression Id. */
  int otimes = 64;
  /** RegularExpression Id. */
  int choice = 65;
  /** RegularExpression Id. */
  int greaterthan = 66;
  /** RegularExpression Id. */
  int sqrtminusone = 67;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 68;
  /** RegularExpression Id. */
  int IDENTIFIER = 69;
  /** RegularExpression Id. */
  int LETTER = 70;
  /** RegularExpression Id. */
  int DIGIT = 71;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"&&\"",
    "\"!\"",
    "\"boolean\"",
    "\"class\"",
    "\"interface\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"if\"",
    "\"while\"",
    "\"int\"",
    "\"length\"",
    "\"main\"",
    "\"new\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"String\"",
    "\"this\"",
    "\"true\"",
    "\"System.out.println\"",
    "\"void\"",
    "\"H\"",
    "\"X\"",
    "\"T\"",
    "\"Z\"",
    "\"D\"",
    "\"S\"",
    "\"CNOT\"",
    "\"CCNOT\"",
    "\"NCCNOT\"",
    "\"CNCNOT\"",
    "\"NCNCNOT\"",
    "\"CZ\"",
    "\"q\"",
    "\"qreg\"",
    "\"measure\"",
    "\"circuit\"",
    "\"qubits\"",
    "\"assert\"",
    "\"span\"",
    "\"state\"",
    "\"in\"",
    "\"(x)\"",
    "\"|\"",
    "\">\"",
    "\"i\"",
    "<INTEGER_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\":\"",
    "\",\"",
    "\"..\"",
  };

}
