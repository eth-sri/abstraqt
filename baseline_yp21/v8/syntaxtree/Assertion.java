//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "assert"
 * f1 -> "state"
 * f2 -> "in"
 * f3 -> "span"
 * f4 -> "{"
 * f5 -> AVector()
 * f6 -> ","
 * f7 -> AVector()
 * f8 -> "}"
 */
public class Assertion implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public NodeToken f2;
   public NodeToken f3;
   public NodeToken f4;
   public AVector f5;
   public NodeToken f6;
   public AVector f7;
   public NodeToken f8;

   public Assertion(NodeToken n0, NodeToken n1, NodeToken n2, NodeToken n3, NodeToken n4, AVector n5, NodeToken n6, AVector n7, NodeToken n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public Assertion(AVector n0, AVector n1) {
      f0 = new NodeToken("assert");
      f1 = new NodeToken("state");
      f2 = new NodeToken("in");
      f3 = new NodeToken("span");
      f4 = new NodeToken("{");
      f5 = n0;
      f6 = new NodeToken(",");
      f7 = n1;
      f8 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

